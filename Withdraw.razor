@page "/withdraw"
@using System.Net.Http.Json
@inject HttpClient HttpClient

<h3>Make a Withdrawal</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
    if (account != null)
    {
        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title">Updated Account Status</h5>
                <p class="card-text">Account ID: @account.AccountId</p>
                <p class="card-text">Balance: @account.Balance</p>
            </div>
        </div>
    }
}

<EditForm Model="@withdrawRequest" OnValidSubmit="@HandleWithdraw">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="accountId">Account ID</label>
        <InputNumber id="accountId" class="form-control" @bind-Value="withdrawRequest.AccountId" />
        <ValidationMessage For="@(() => withdrawRequest.AccountId)" />
    </div>

    <div class="form-group">
        <label for="amount">Amount</label>
        <InputNumber id="amount" class="form-control" @bind-Value="withdrawRequest.Amount" />
        <ValidationMessage For="@(() => withdrawRequest.Amount)" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">Withdraw</button>
</EditForm>

@code {
    private WithdrawRequest withdrawRequest = new WithdrawRequest();
    private string? errorMessage;
    private string? successMessage;
    private AccountDTO? account;

    private class WithdrawRequest
    {
        public int AccountId { get; set; }
        public decimal Amount { get; set; }
    }

    private class AccountDTO
    {
        public int AccountId { get; set; }
        public decimal Balance { get; set; }
    }

    private async Task HandleWithdraw()
    {
        try
        {
            errorMessage = null;
            successMessage = null;
            account = null;

            var response = await HttpClient.PostAsJsonAsync("api/Accounts/withdraw", withdrawRequest);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Withdrawal successful!";
                // Hämta uppdaterad kontoinformation
                var accountResponse = await HttpClient.GetAsync($"api/Accounts/{withdrawRequest.AccountId}");
                if (accountResponse.IsSuccessStatusCode)
                {
                    account = await accountResponse.Content.ReadFromJsonAsync<AccountDTO>();
                }
                else
                {
                    errorMessage = $"Failed to fetch updated account: {accountResponse.StatusCode}";
                }
                withdrawRequest = new WithdrawRequest(); 
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "Account not found.";
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = errorContent;
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode} - {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}
